
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://xpiiflvojrachlfoypcx.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InhwaWlmbHZvanJhY2hsZm95cGN4Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDczMzA4NjAsImV4cCI6MjA2MjkwNjg2MH0.ZRYqDAIt2Y8RGeKln5EEf_TGeJ06qZJ86CXlJdPGWHQ";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

// We're using any here to bypass TypeScript errors while keeping the types.ts file read-only
// In a production app, you would properly define your database types
export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

// Add these methods to help with type assertions for Supabase queries
export const fromTable = <T = any>(table: string) => {
  return supabase.from(table) as unknown as ReturnType<typeof supabase.from<T>>;
};

export const updateTable = <T = any>(table: string) => {
  return supabase.from(table) as unknown as ReturnType<typeof supabase.from<T>>;
};
