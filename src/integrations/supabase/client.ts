
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://xpiiflvojrachlfoypcx.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InhwaWlmbHZvanJhY2hsZm95cGN4Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDczMzA4NjAsImV4cCI6MjA2MjkwNjg2MH0.ZRYqDAIt2Y8RGeKln5EEf_TGeJ06qZJ86CXlJdPGWHQ";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

// Create the supabase client with "any" to bypass TypeScript strict checks
export const supabase = createClient(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY) as any;

// Helper types for better type inference in components
export type PostgrestResponse<T> = {
  data: T | null;
  error: any;
};

// Type-safe wrapper functions
export function query<T>(tableName: string) {
  return {
    select: (columns = '*') => {
      const builder = supabase.from(tableName).select(columns);
      return {
        eq: (column: string, value: any) => ({
          single: () => builder.eq(column, value).single() as Promise<PostgrestResponse<T>>,
          maybeSingle: () => builder.eq(column, value).maybeSingle() as Promise<PostgrestResponse<T>>,
          execute: () => builder.eq(column, value) as Promise<PostgrestResponse<T[]>>,
        }),
        execute: () => builder as Promise<PostgrestResponse<T[]>>,
      };
    },
  };
}

export function mutate<T>(tableName: string) {
  return {
    update: (values: any) => {
      const builder = supabase.from(tableName).update(values);
      return {
        eq: (column: string, value: any) => ({
          eq: (col2: string, val2: any) => builder.eq(column, value).eq(col2, val2) as Promise<PostgrestResponse<T[]>>,
          execute: () => builder.eq(column, value) as Promise<PostgrestResponse<T[]>>,
        }),
        execute: () => builder as Promise<PostgrestResponse<T[]>>,
      };
    },
    insert: (values: any) => supabase.from(tableName).insert(values) as Promise<PostgrestResponse<T[]>>,
    delete: () => {
      const builder = supabase.from(tableName).delete();
      return {
        eq: (column: string, value: any) => builder.eq(column, value) as Promise<PostgrestResponse<T[]>>,
        execute: () => builder as Promise<PostgrestResponse<T[]>>,
      };
    },
  };
}
